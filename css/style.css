*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*Inherits box-sizing property from body*/ }

html {
  font-size: 62.5%;
  /*Root font size (1rem = 10px)*/ }

body {
  font-family: 'Lato', sans-serif;
  /*Set font-family in body (Watch from 4:51 in Lecture 6)*/
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  /*Line height is 1.7x bigger than the line height without this*/
  color: #777;
  padding: 3rem;
  box-sizing: border-box;
  /*Changes Box model so that the borders and the paddings are no longer added to the total width or the total height, that we specify for a box*/ }

.header {
  height: 95vh;
  /*At every point, the height of this box/element should be 95% of the viewport height*/
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /*Gradient above image and Gradient moves from left-top to right-bottom*/
  background-size: cover;
  /*cover - Whatever the width of the viewport/element it will always try to fit the element inside the box*/
  background-position: top;
  /*top - Whatever the viewport size, top of image always stays at the top of the container (Lecture 6 11:17)*/
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*Explanation (Lecture 6 17:19)*/ }

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem; }

.header__logo {
  height: 3.5rem;
  /*Prefer to control height of element rather then width*/ }

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*Explanation (Lecture 7 13:08)*/
  text-align: center;
  /*Also aligns inline button*/ }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*Fixes shaky animation (Lecture 8 12:20)*/
  margin-bottom: 6rem; }

.heading-primary--main {
  display: block;
  /*Inspect element to find out what display: block does*/
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /*Explanation Lecture 8 (8:39)*/
  /*
      animation-iteration-count: 3; Animation happens three times
      animation-delay: 3s;
    */ }

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1s ease-out; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
    /*Goes from left to right*/ }
  80% {
    transform: translateX(1rem);
    /*Moves 10px more to the right so bounces back left at 100%*/ }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
    /*Goes from right to left*/ }
  80% {
    transform: translateX(-1rem);
    /*Moves 10px more to the left so bounces back right at 100%*/ }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
    /*Goes from top to bottom*/ }
  80% {
    transform: translateY(-1rem);
    /*Moves 10px more to the top so bounces back down at 100%*/ }
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn:link,
.btn:visited {
  /* psuedo class Explanation (Lecture 9 3:33)*/
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /*Box model works on this element as if it was a normal block element and since it's inline. It can be treated as text*/
  border-radius: 10rem;
  transition: all 0.2s;
  /*All properties are enabled to be animated*/
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  /*Moves btn UP*/
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /*X-axis, Y-axis, Blur, colour*/ }

.btn:active {
  transform: translateY(-1px);
  /*Btn moves up related to initial link state when clicked (pushed effect)*/
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }

.btn::after {
  /*:after pseudo element is treated as a child of the element (i.e. child of btn therefore has exact same dimensions etc.)*/
  content: '';
  /*Need to specify content to allow :after pseudo element to appear (Can be left empty)*/
  display: inline-block;
  /*Also need display property for :after psedo element to appear*/
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  /*Needs reference from first relative position it can find. Explanation (Lecture 10 3:30)*/
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--white::after {
  background-color: #fff; }

.btn:hover::after {
  /*Manipulates :after pseudo element when hovering over btn*/
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /*0.75s is the animation delay*/
  animation-fill-mode: backwards;
  /*Automatically applies the 0% styles before the animation starts*/ }
