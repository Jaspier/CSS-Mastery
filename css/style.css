@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
    /*Goes from left to right*/ }
  80% {
    transform: translateX(1rem);
    /*Moves 10px more to the right so bounces back left at 100%*/ }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
    /*Goes from right to left*/ }
  80% {
    transform: translateX(-1rem);
    /*Moves 10px more to the left so bounces back right at 100%*/ }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
    /*Goes from top to bottom*/ }
  80% {
    transform: translateY(-1rem);
    /*Moves 10px more to the top so bounces back down at 100%*/ }
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*Inherits box-sizing property from body*/ }

html {
  font-size: 62.5%;
  /*Root font size (1rem = 10px)*/ }

body {
  box-sizing: border-box;
  /*Changes Box model so that the borders and the paddings are no longer added to the total width or the total height, that we specify for a box*/ }

body {
  font-family: 'Lato', sans-serif;
  /*Set font-family in body (Watch from 4:51 in Lecture 6)*/
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  /*Line height is 1.7x bigger than the line height without this*/
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*Fixes shaky animation (Lecture 8 12:20)*/
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /*Inspect element to find out what display: block does*/
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /*Explanation Lecture 8 (8:39)*/
    /*
          animation-iteration-count: 3; Animation happens three times
          animation-delay: 3s;
        */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*Inherits box-sizing property from body*/ }

html {
  font-size: 62.5%;
  /*Root font size (1rem = 10px)*/ }

body {
  box-sizing: border-box;
  /*Changes Box model so that the borders and the paddings are no longer added to the total width or the total height, that we specify for a box*/ }

.btn:link, .btn:visited {
  /* psuedo class Explanation (Lecture 9 3:33)*/
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /*Box model works on this element as if it was a normal block element and since it's inline. It can be treated as text*/
  border-radius: 10rem;
  transition: all 0.2s;
  /*All properties are enabled to be animated*/
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  /*Moves btn UP*/
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /*X-axis, Y-axis, Blur, colour*/ }
  .btn:hover::after {
    /*Manipulates :after pseudo element when hovering over btn*/
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  /*Btn moves up related to initial link state when clicked (pushed effect)*/
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  /*:after pseudo element is treated as a child of the element (i.e. child of btn therefore has exact same dimensions etc.)*/
  content: '';
  /*Need to specify content to allow :after pseudo element to appear (Can be left empty)*/
  display: inline-block;
  /*Also need display property for :after psedo element to appear*/
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  /*Needs reference from first relative position it can find. Explanation (Lecture 10 3:30)*/
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /*0.75s is the animation delay*/
  animation-fill-mode: backwards;
  /*Automatically applies the 0% styles before the animation starts*/ }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all 0.2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: '';
    display: table;
    clear: both; }
  .row [class^='col-'] {
    float: left; }
    .row [class^='col-']:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /*At every point, the height of this box/element should be 95% of the viewport height*/
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /*Gradient above image and Gradient moves from left-top to right-bottom*/
  background-size: cover;
  /*cover - Whatever the width of the viewport/element it will always try to fit the element inside the box*/
  background-position: top;
  /*top - Whatever the viewport size, top of image always stays at the top of the container (Lecture 6 11:17)*/
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*Explanation (Lecture 6 17:19)*/ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem;
    /*Prefer to control height of element rather then width*/ }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /*Explanation (Lecture 7 13:08)*/
    text-align: center;
    /*Also aligns inline button*/ }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
